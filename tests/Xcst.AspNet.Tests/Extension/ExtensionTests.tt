<#@ Template Language="C#" Debug="false" HostSpecific="true" #>
<#@ Output Extension=".generated.cs" #>
<#@ Assembly Name="System" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)src\Xcst.AspNet\bin\Debug\Xcst.Compiler.dll" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.Collections.Generic" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Text.RegularExpressions" #>
<#@ Import Namespace="Microsoft.CSharp" #>
<#@ Import Namespace="Xcst.Compiler" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using static Microsoft.VisualStudio.TestTools.UnitTesting.Assert;
using static Xcst.Web.Tests.Extension.ExtensionTestsHelper;

namespace Xcst.Web.Tests {<#
   var startDirectory = Directory.CreateDirectory(this.Host.ResolvePath(""));
   PushIndent(Indent);
   GenerateTests(startDirectory, startDirectory.Name);
   WriteLine("");
   PopIndent();
#>
}
<#+

readonly XcstCompilerFactory compilerFactory = new XcstCompilerFactory();
const string Indent = "   ";

void GenerateTests(DirectoryInfo directory, string category) {

   var packages = directory.EnumerateFiles("*.pxcst").ToArray();

   foreach (FileInfo file in packages) {

      using (var fileStream = File.OpenRead(file.FullName)) {

         XcstCompiler compiler = this.compilerFactory.CreateCompiler();
         compiler.TargetNamespace = directory.Name;
         compiler.LibraryPackage = true;

         CompileResult xcstResult = compiler.Compile(fileStream, baseUri: new Uri(file.FullName, UriKind.Absolute));

         foreach (var src in xcstResult.CompilationUnits) {
            Write(src);
         }
      }
   }

   WriteLine("");
   WriteLine("namespace {0} {{", directory.Name);
   PushIndent(Indent);

   var tests = directory.EnumerateFiles("*.xcst").ToArray();

   if (tests.Length > 0) {

      WriteLine("");
      WriteLine("[TestClass]");
      WriteLine("public class {0}Tests {{", directory.Name);
      PushIndent(Indent);

      foreach (FileInfo file in tests) { 

         string fileName = Path.GetFileNameWithoutExtension(file.Name);

         if (fileName[0] == '_') {
            continue;
         }

         bool correct = fileName.EndsWith(".c");
         string fileName2 = fileName.Substring(0, fileName.LastIndexOf("."));
         string testName = Regex.Replace(fileName.Replace(".", "_").Replace("-", "_"), @"([a-z])([A-Z])", "$1_$2");

         WriteLine("");
         WriteLine("#line 1 \"{0}\"", file.FullName);
         WriteLine("[TestMethod, TestCategory(\"{0}\")]", category);

         if (!correct) {
            WriteLine("[ExpectedException(typeof(Xcst.Compiler.CompileException))]");
         }

         WriteLine("public void {0}() {{", testName);
         PushIndent(Indent);
         
         WriteLine("");
         WriteLine("var result = CompileFromFile(@\"{0}\", correct: {1});", file.FullName, correct.ToString().ToLower());
         WriteLine("var moduleType = result.Item1;");
         WriteLine("");
         
         WriteLine("if (result.Item2.Templates.Contains(new QualifiedName(\"expected\"))) {");
         PushIndent(Indent);
         WriteLine("IsTrue(OutputEqualsToExpected(moduleType));");
         PopIndent();
         WriteLine("}");

         PopIndent();
         WriteLine("}");
      }

      PopIndent();
      WriteLine("}");
   }

   foreach (DirectoryInfo subDirectory in directory.EnumerateDirectories()) {
      GenerateTests(subDirectory, category + "." + subDirectory.Name);
   }

   PopIndent();
   WriteLine("}");
}

#>