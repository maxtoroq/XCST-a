param(
   $Configuration = "Debug"
)

$ErrorActionPreference = "Stop"
Push-Location (Split-Path $script:MyInvocation.MyCommand.Path)

$singleIndent = "   "
$indent = ""

function PushIndent {
   $script:indent = $indent + $singleIndent
}

function PopIndent {
   $script:indent = $indent.Substring($singleIndent.Length)
}

function WriteLine($line = "") {
   $indent + $line
}

function GenerateTests {

   $compilerPath = Resolve-Path ..\..\..\src\Xcst.AspNet\bin\$Configuration

   # AssemblyResolve is used to enable loading newer versions of Xcst.Compiler's dependencies

   $onAssemblyResolve = [ResolveEventHandler] {
      param($sender, $e)
      
      $assemblyName = $e.Name.Substring(0, $e.Name.IndexOf(","))
      $assemblyPath = "$compilerPath\$assemblyName.dll"

      return [Reflection.Assembly]::LoadFrom((Resolve-Path $assemblyPath))
   }

   [AppDomain]::CurrentDomain.add_AssemblyResolve($onAssemblyResolve)

   try {
      Add-Type -Path $compilerPath\Xcst.Compiler.dll
   } finally {
      # Detach the event handler (not detaching can lead to stack overflow issues when closing PS)
      [AppDomain]::CurrentDomain.remove_AssemblyResolve($onAssemblyResolve)
   }

   $compilerFactory = New-Object Xcst.Compiler.XcstCompilerFactory
   $startDirectory = Get-Item .

@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Xcst.Web.Tests {

   using static Extension.ExtensionTestsHelper;
"@
   PushIndent
   GenerateTestsForDirectory $startDirectory $startDirectory.Name
   PopIndent
   "}"
}

function GenerateTestsForDirectory([IO.DirectoryInfo]$directory, $category) {

   foreach ($file in ls $directory.FullName *.pxcst) {

      $compiler = $compilerFactory.CreateCompiler()
      $compiler.TargetNamespace = $directory.Name
      $compiler.NamedPackage = $true
      $compiler.IndentChars = $singleIndent

      $xcstResult = $compiler.Compile((New-Object Uri $file.FullName))

      foreach ($src in $xcstResult.CompilationUnits) {
         WriteLine $src
      }
   }

   WriteLine
   WriteLine "namespace $($directory.Name) {"
   PushIndent

   $tests = ls $directory.FullName *.xcst

   if ($tests.Length -gt 0) {
   
      WriteLine
      WriteLine "[TestClass]"
      WriteLine "public class $($directory.Name)Tests {"
      PushIndent

      foreach ($file in $tests) { 

         $fileName = [IO.Path]::GetFileNameWithoutExtension($file.Name)

         if ($fileName[0] -eq '_') {
            continue
         }

         $fail = $fileName -like '*.f'
         $correct = $fail -or $fileName -like '*.c'
         $testName = ($fileName -replace '[.-]', '_') -creplace '([a-z])([A-Z])', '$1_$2'

         WriteLine
         WriteLine "#line 1 ""$($file.FullName)"""
         WriteLine "[TestMethod, TestCategory(""$category"")]"

         if (!$correct) {
            WriteLine "[ExpectedException(typeof(Xcst.Compiler.CompileException))]"
         
         } elseif ($fail) {
            WriteLine "[ExpectedException(typeof(Xcst.RuntimeException))]"
         }

         WriteLine "public void $testName() {"
         PushIndent
         WriteLine "RunXcstTest(@""$($file.FullName)"", correct: $($correct.ToString().ToLower()), fail: $($fail.ToString().ToLower()));"
         PopIndent
         WriteLine "}"
      }

      PopIndent
      WriteLine "}"
   }

   foreach ($subDirectory in ls $directory.FullName -Directory) {
      GenerateTestsForDirectory $subDirectory ($category + "." + $subDirectory.Name)
   }

   PopIndent
   WriteLine "}"
}

try {

   GenerateTests | Out-File ExtensionTests.generated.cs -Encoding utf8

} finally {
   Pop-Location
}