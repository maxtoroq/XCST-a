param(
   $Configuration = "Debug"
)

$ErrorActionPreference = "Stop"
Push-Location (Split-Path $script:MyInvocation.MyCommand.Path)

$singleIndent = "   "
$indent = ""

function PushIndent {
   $script:indent = $indent + $singleIndent
}

function PopIndent {
   $script:indent = $indent.Substring($singleIndent.Length)
}

function WriteLine($line = "") {
   $indent + $line
}

function GenerateTests {

   $compilerPath = Resolve-Path ..\..\src\Xcst.AspNet.Compilation\bin\$Configuration

   Add-Type -Path $compilerPath\Xcst.Compiler.dll

   $compilerFactory = New-Object Xcst.Compiler.XcstCompilerFactory

@"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using TestFx = NUnit.Framework;
using static Xcst.Web.Tests.TestsHelper;
"@
   foreach ($subDirectory in ls -Directory) {
      GenerateTestsForDirectory $subDirectory $subDirectory.Name
   }
}

function GenerateTestsForDirectory([IO.DirectoryInfo]$directory, [string]$relativeNs) {

   $ns = "Xcst.Web.Tests.$relativeNs"

   foreach ($file in ls $directory.FullName *.pxcst) {

      $compiler = $compilerFactory.CreateCompiler()
      $compiler.TargetNamespace = $directory.Name
      $compiler.NamedPackage = $true
      $compiler.IndentChars = $singleIndent

      $xcstResult = $compiler.Compile((New-Object Uri $file.FullName))

      foreach ($src in $xcstResult.CompilationUnits) {
         WriteLine $src
      }
   }

   $tests = ls $directory.FullName *.xcst

   if ($tests.Length -gt 0) {

      WriteLine
      WriteLine "namespace $ns {"
      PushIndent

      WriteLine
      WriteLine "[TestFx.TestFixture]"
      WriteLine "public class $($directory.Name)Tests {"
      PushIndent

      foreach ($file in $tests) { 

         $fileName = [IO.Path]::GetFileNameWithoutExtension($file.Name)

         if ($fileName[0] -eq '_') {
            continue
         }

         $fail = $fileName -like '*.f'
         $correct = $fail -or $fileName -like '*.c'
         $testName = ($fileName -replace '[.-]', '_') -creplace '([a-z])([A-Z])', '$1_$2'
         $assertThrows = !$correct -or $fail

         WriteLine
         WriteLine "#line 1 ""$($file.FullName)"""
         WriteLine "[TestFx.Test, TestFx.Category(""$relativeNs"")]"

         WriteLine "public void $testName() {"
         PushIndent
         
         $testCall = "RunXcstTest(@""$($file.FullName)"", ""$testName"", ""$ns"", correct: $($correct.ToString().ToLower()), fail: $($fail.ToString().ToLower()))"

         if ($assertThrows) {

            $testException = if (!$correct) { "Xcst.Compiler.CompileException" } else { "Xcst.RuntimeException" }
            WriteLine "TestFx.Assert.Throws<$testException>(() => $testCall);"
         } else {
            WriteLine ($testCall + ";")
         }

         PopIndent
         WriteLine "}"
         WriteLine "#line default"
      }

      PopIndent
      WriteLine "}"

      PopIndent
      WriteLine "}"
   }

   foreach ($subDirectory in ls $directory.FullName -Directory) {
      GenerateTestsForDirectory $subDirectory ($relativeNs + "." + $subDirectory.Name)
   }
}

try {

   GenerateTests | Out-File Tests.generated.cs -Encoding utf8

} finally {
   Pop-Location
}