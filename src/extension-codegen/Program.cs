using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using System.Xml.Linq;
using Xcst;
using Xcst.Compiler;

namespace XcstCodeGen {

   class Program {

      const string
      _fileExt = "xcst";

      readonly Uri
      _projectUri;

      public
      Program(Uri projectUri) {
         _projectUri = projectUri;
      }

      static string
      RootNamespace(XDocument projectDoc, string projectPath) {

         var xmlns = projectDoc.Root!.Name.Namespace;

         return projectDoc.Root!
            .Element(xmlns + "PropertyGroup")?
            .Element(xmlns + "RootNamespace")?.Value
            ?? Path.GetFileNameWithoutExtension(projectPath);
      }

      static string?
      Nullable(XDocument projectDoc) {

         var xmlns = projectDoc.Root!.Name.Namespace;

         return projectDoc.Root!
            .Element(xmlns + "PropertyGroup")?
            .Element(xmlns + "Nullable")?.Value;
      }

      static string
      FileNamespace(Uri fileUri, Uri startUri, string rootNamespace) {

         var ns = rootNamespace;
         var relativePath = startUri.MakeRelativeUri(fileUri).OriginalString;

         if (relativePath.Contains("/")) {

            var relativeDir = startUri.MakeRelativeUri(new Uri(Path.GetDirectoryName(fileUri.LocalPath)!, UriKind.Absolute))
               .OriginalString;

            ns = String.Join(".", new[] { ns }.Concat(
               relativeDir
                  .Split('/')
                  .Select(n => CleanIdentifier(n))));
         }

         return ns;
      }

      // Transforms invalid identifier (class, namespace, variable) characters
      static string
      CleanIdentifier(string identifier) =>
         Regex.Replace(identifier, "[^a-z0-9_]", "_", RegexOptions.IgnoreCase);

      // Show compilation errors on Visual Studio's Error List
      // Also makes the error on the Output window clickable
      static void
      VisualStudioErrorLog(RuntimeException ex) {

         dynamic? errorData = ex.ErrorData;

         if (errorData != null) {

            string uriString = errorData.ModuleUri;
            string path = (Uri.TryCreate(uriString, UriKind.Absolute, out var uri) && uri.IsFile) ?
               uri.LocalPath
               : uriString;

            Console.WriteLine($"{path}({errorData.LineNumber}): XCST error {ex.ErrorCode}: {ex.Message}");
         }
      }

      void
      Run(TextWriter output) {

         var startUri = new Uri(_projectUri, ".");

         var compilerFact = new XcstCompilerFactory();

         var compiler = compilerFact.CreateCompiler();
         compiler.PackageFileDirectory = startUri.LocalPath;
         compiler.PackageFileExtension = _fileExt;
         compiler.IndentChars = "   ";
         compiler.CompilationUnitHandler = href => output;

         var projectDoc = XDocument.Load(_projectUri.LocalPath);

         var rootNamespace = RootNamespace(projectDoc, _projectUri.LocalPath);
         var nullable = Nullable(projectDoc);

         if (nullable != null) {
            compiler.NullableAnnotate = true;
            compiler.NullableContext = nullable;
         }

         output.WriteLine("//------------------------------------------------------------------------------");
         output.WriteLine("// <auto-generated>");
         output.WriteLine("//     This code was generated by a tool.");
         output.WriteLine("//");
         output.WriteLine("//     Changes to this file may cause incorrect behavior and will be lost if");
         output.WriteLine("//     the code is regenerated.");
         output.WriteLine("// </auto-generated>");
         output.WriteLine("//------------------------------------------------------------------------------");

         foreach (var file in Directory.EnumerateFiles(startUri.LocalPath, "*." + _fileExt, SearchOption.AllDirectories)) {

            var fileUri = new Uri(file, UriKind.Absolute);
            var fileName = Path.GetFileName(file);
            var fileBaseName = Path.GetFileNameWithoutExtension(file);

            // Ignore files starting with underscore
            if (fileName[0] == '_') {
               continue;
            }

            compiler.TargetNamespace = FileNamespace(fileUri, startUri, rootNamespace);
            compiler.TargetClass = CleanIdentifier(fileBaseName);
            compiler.TargetBaseTypes = null;

            CompileResult xcstResult;

            try {
               xcstResult = compiler.Compile(fileUri);

            } catch (RuntimeException ex) {
               VisualStudioErrorLog(ex);
               throw;
            }
         }
      }

      public static void
      Main(string[] args) {

         var currentDir = Environment.CurrentDirectory;

         if (currentDir.Last() != Path.DirectorySeparatorChar) {
            currentDir += Path.DirectorySeparatorChar;
         }

         var callerBaseUri = new Uri(currentDir, UriKind.Absolute);
         var projectUri = new Uri(callerBaseUri, args[0]);
         var outputUri = new Uri(projectUri, args[1]);

         using var output = File.CreateText(outputUri.LocalPath);

         // Because XML parsers normalize CRLF to LF,
         // we want to be consistent with the additional content we create
         output.NewLine = "\n";

         new Program(projectUri)
            .Run(output);
      }
   }
}
