<?xml version="1.0" encoding="utf-8" ?>
<!--
 Copyright 2022 Max Toro Q.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<module version='1.0' language='C#'
   xmlns='http://maxtoroq.github.io/XCST'
   xmlns:xcst='https://maxtoroq.github.io/XCST/grammar'
   xmlns:code='https://maxtoroq.github.io/XCST/code'
   xmlns:src='https://maxtoroq.github.io/XCST/compiled'>

   <import-namespace ns='System.Linq'/>
   <import-namespace ns='System.Xml.Linq'/>

   <variable name='html_attributes' as='string[]'>
      <object>class</object>
   </variable>

   <variable name='input_attributes' as='string[]'>
      <object>for</object>
      <object>name</object>
      <object>value</object>
      <object value='input_client_attributes'/>
      <object value='html_attributes'/>
   </variable>

   <variable name='input_client_attributes' value='input_client_bool_attributes' as='string[]'/>

   <variable name='input_client_bool_attributes' as='string[]'>
      <object>disabled</object>
      <object>autofocus</object>
   </variable>

   <variable name='textbox_attributes' as='string[]'>
      <object value='input_attributes.Union(textbox_client_attributes)'/>
   </variable>

   <variable name='textbox_client_attributes' as='string[]'>
      <object value='textbox_client_bool_attributes.Union(input_client_attributes)'/>
      <object>placeholder</object>
   </variable>

   <variable name='textbox_client_bool_attributes' as='string[]'>
      <object value='input_client_bool_attributes'/>
      <object>readonly</object>
   </variable>

   <template match='XElement el &amp;&amp; (el.Name == a + "input" || el.Name == a + "hidden")' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='hidden' value='el.Name.LocalName == "hidden"'/>

      <variable name='clientAttributes' value='(hidden) ?
         input_client_attributes
         : textbox_client_attributes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='
            (hidden) ? input_attributes.Where(p => p != "autofocus").ToArray()
               : textbox_attributes.Concat(new[] { "format", "type" }).ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
         <with-param name='attribs' value='attributes(el)
            .Where(p => p.Name == "name" || p.Name == "value")
            .ToArray()'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>
      <variable name='outputRef' value='select(docOutput, src + "reference", code)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <variable name='clientAttribs' value='attributes(el)
         .Where(p => p.Name.Namespace == XNamespace.None
            &amp;&amp; clientAttributes.Contains(p.Name.LocalName))
         .ToArray()'/>

      <choose>
         <when test='!element_is_empty(el) || !fn_empty(clientAttribs)'>
            <code:using>
               <call-template name='input-or-hidden'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:block>
                  <for-each name='attr' in='clientAttribs'>
                     <choose>
                        <when test='textbox_client_bool_attributes.Contains(attr.Name.LocalName)'>
                           <code:method-call name='WriteBoolean'>
                              <call-template name='html-helper-ref'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <call-template name='src:boolean'>
                                    <with-param name='val' value='xcst_boolean(attr, true)'/>
                                    <with-param name='avt' value='attr'/>
                                 </call-template>
                                 <copy-of value='outputRef'/>
                              </code:arguments>
                           </code:method-call>
                        </when>
                        <otherwise>
                           <code:method-call name='WriteAttributeString'>
                              <copy-of value='outputRef'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <invoke-delegate delegate='src_expand_attribute' with-params='new { attr }'/>
                              </code:arguments>
                           </code:method-call>
                        </otherwise>
                     </choose>
                  </for-each>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </invoke-delegate>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='input-or-hidden'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='input-or-hidden'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='hidden' value='el.Name.LocalName == "hidden"'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>
      <variable name='forModel' value='forAttr is null &amp;&amp; nameAttr is null'/>

      <code:method-call>
         <attribute name='name'>
            <text>Input</text>
            <if test='forAttr != null || forModel'>For</if>
            <if test='forModel'>Model</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <otherwise>
                  <if test='nameAttr != null'>
                     <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
                  </if>
                  <if test='el.Attribute("value") is { } valueAttr'>
                     <code:expression value='{xcst_expression(valueAttr)}'/>
                  </if>
               </otherwise>
            </choose>
            <choose>
               <when test='hidden'>
                  <code:argument name='type'>
                     <code:string literal='true'>hidden</code:string>
                  </code:argument>
               </when>
               <when test='el.Attribute("type") is { } typeAttr'>
                  <code:argument name='type'>
                     <call-template name='app-input-type'>
                        <with-param name='val' value='xcsta_input_type(typeAttr, true)'/>
                        <with-param name='avt' value='typeAttr'/>
                     </call-template>
                  </code:argument>
               </when>
            </choose>
            <if test='!hidden
                  &amp;&amp; el.Attribute("format") is { } formatAttr'>
               <code:argument name='format'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = formatAttr }'/>
               </code:argument>
            </if>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; (el.Name == a + "input" || el.Name == a + "hidden")' mode='xcst:extension-instruction'>
      <call-template name='element-instruction'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "textarea"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='clientAttributes' value='textbox_client_attributes
         .Concat(new[] { "rows", "cols" })
         .ToArray()'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='textbox_attributes
            .Union(clientAttributes)
            .ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
         <with-param name='attribs' value='attributes(el)
            .Where(p => p.Name == "name" || p.Name == "value")
            .ToArray()'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>
      <variable name='outputRef' value='select(docOutput, src + "reference", code)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <variable name='clientAttribs' value='attributes(el)
         .Where(p => p.Name.Namespace == XNamespace.None
            &amp;&amp; clientAttributes.Contains(p.Name.LocalName))
         .ToArray()'/>

      <choose>
         <when test='!element_is_empty(el) || !fn_empty(clientAttribs)'>
            <variable name='dispVar' value='aux_variable("txtarea_" + fn_generate_id(el))'/>
            <code:using>
               <code:variable name='{dispVar}'>
                  <call-template name='textarea'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </call-template>
               </code:variable>
               <code:block>
                  <for-each name='attr' in='clientAttribs'>
                     <choose>
                        <when test='textbox_client_bool_attributes.Contains(attr.Name.LocalName)'>
                           <code:method-call name='WriteBoolean'>
                              <call-template name='html-helper-ref'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <call-template name='src:boolean'>
                                    <with-param name='val' value='xcst_boolean(attr, true)'/>
                                    <with-param name='avt' value='attr'/>
                                 </call-template>
                                 <copy-of value='outputRef'/>
                              </code:arguments>
                           </code:method-call>
                        </when>
                        <otherwise>
                           <code:method-call name='WriteAttributeString'>
                              <copy-of value='outputRef'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <choose>
                                    <when test='attr.Name.LocalName is "rows" or "cols"'>
                                       <code:chain>
                                          <copy-of value='outputRef'/>
                                          <code:property-reference name='SimpleContent'>
                                             <code:chain-reference/>
                                          </code:property-reference>
                                          <code:method-call name='Convert'>
                                             <code:chain-reference/>
                                             <call-template name='src:integer'>
                                                <with-param name='val' value='xcst_integer(attr, true)'/>
                                                <with-param name='avt' value='attr'/>
                                             </call-template>
                                          </code:method-call>
                                       </code:chain>
                                    </when>
                                    <otherwise>
                                       <invoke-delegate delegate='src_expand_attribute' with-params='new { attr }'/>
                                    </otherwise>
                                 </choose>
                              </code:arguments>
                           </code:method-call>
                        </otherwise>
                     </choose>
                  </for-each>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </invoke-delegate>
                  <code:method-call name='EndOfConstructor'>
                     <code:variable-reference name='{dispVar}'/>
                  </code:method-call>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='textarea'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='NoConstructor'>
                  <code:chain-reference/>
               </code:method-call>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='textarea'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>

      <code:method-call>
         <attribute name='name'>
            <text>Textarea</text>
            <if test='forAttr != null'>For</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <otherwise>
                  <choose>
                     <when test='nameAttr != null'>
                        <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
                     </when>
                     <otherwise>
                        <code:string/>
                     </otherwise>
                  </choose>
                  <if test='el.Attribute("value") is { } valueAttr'>
                     <code:expression value='{xcst_expression(valueAttr)}'/>
                  </if>
               </otherwise>
            </choose>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "textarea"' mode='xcst:extension-instruction'>
      <call-template name='element-instruction'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "checkbox"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='clientAttributes' value='input_client_attributes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='input_attributes
            .Where(p => p != "value")
            .Append("checked")
            .ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
         <with-param name='attribs' value='attributes(el)
            .Where(p => p.Name == "name" || p.Name == "checked")
            .ToArray()'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='clientAttribs' value='attributes(el)
         .Where(p => p.Name.Namespace == XNamespace.None
            &amp;&amp; clientAttributes.Contains(p.Name.LocalName))
         .ToArray()'/>

      <choose>
         <when test='!element_is_empty(el) || !fn_empty(clientAttribs)'>
            <variable name='dispVar' value='aux_variable("chkbx_" + fn_generate_id(el))'/>
            <code:using>
               <code:variable name='{dispVar}'>
                  <call-template name='checkbox'>
                     <with-param name='el' value='el'/>
                  </call-template>
               </code:variable>
               <code:block>
                  <variable name='outputRef'>
                     <code:property-reference name='CheckboxOutput'>
                        <code:variable-reference name='{dispVar}'/>
                     </code:property-reference>
                  </variable>
                  <for-each name='attr' in='clientAttribs'>
                     <choose>
                        <when test='input_client_bool_attributes.Contains(attr.Name.LocalName)'>
                           <code:method-call name='WriteBoolean'>
                              <call-template name='html-helper-ref'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <call-template name='src:boolean'>
                                    <with-param name='val' value='xcst_boolean(attr, true)'/>
                                    <with-param name='avt' value='attr'/>
                                 </call-template>
                                 <copy-of value='outputRef'/>
                              </code:arguments>
                           </code:method-call>
                        </when>
                        <otherwise>
                           <code:method-call name='WriteAttributeString'>
                              <copy-of value='outputRef'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <invoke-delegate delegate='src_expand_attribute' with-params='new { attr }'/>
                              </code:arguments>
                           </code:method-call>
                        </otherwise>
                     </choose>
                  </for-each>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                  </invoke-delegate>
                  <code:method-call name='EndOfConstructor'>
                     <code:variable-reference name='{dispVar}'/>
                  </code:method-call>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='checkbox'>
                  <with-param name='el' value='el'/>
               </call-template>
               <code:method-call name='NoConstructor'>
                  <code:chain-reference/>
               </code:method-call>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='checkbox'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>
      <variable name='forModel' value='forAttr is null &amp;&amp; nameAttr is null'/>

      <code:method-call>
         <attribute name='name'>
            <text>Checkbox</text>
            <if test='forAttr != null || forModel'>For</if>
            <if test='forModel'>Model</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <otherwise>
                  <if test='nameAttr != null'>
                     <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
                  </if>
                  <if test='el.Attribute("checked") is { } checkedAttr'>
                     <code:argument name='isChecked'>
                        <call-template name='src:boolean'>
                           <with-param name='val' value='xcst_boolean(checkedAttr, true)'/>
                           <with-param name='avt' value='checkedAttr'/>
                        </call-template>
                     </code:argument>
                  </if>
               </otherwise>
            </choose>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "checkbox"' mode='xcst:extension-instruction'>
      <variable name='instruction'>
         <call-template name="element-instruction"/>
      </variable>
      <xcst:instruction>
         <code:type-reference array-dimensions='1'>
            <copy-of value='select(instruction, code + "type-reference")'/>
         </code:type-reference>
      </xcst:instruction>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "radio"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='clientAttributes' value='input_client_attributes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='required' value='new[] { "value" }'/>
         <with-param name='optional' value='input_attributes
            .Where(p => p != "value")
            .Append("checked")
            .ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
         <with-param name='attribs' value='attributes(el)
            .Where(p => p.Name == "name" || p.Name == "checked")
            .ToArray()'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>
      <variable name='outputRef' value='select(docOutput, src + "reference", code)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <variable name='clientAttribs' value='attributes(el)
         .Where(p => p.Name.Namespace == XNamespace.None
            &amp;&amp; clientAttributes.Contains(p.Name.LocalName))
         .ToArray()'/>

      <choose>
         <when test='!element_is_empty(el) || !fn_empty(clientAttribs)'>
            <code:using>
               <call-template name='radio'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:block>
                  <for-each name='attr' in='clientAttribs'>
                     <choose>
                        <when test='input_client_bool_attributes.Contains(attr.Name.LocalName)'>
                           <code:method-call name='WriteBoolean'>
                              <call-template name='html-helper-ref'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <call-template name='src:boolean'>
                                    <with-param name='val' value='xcst_boolean(attr, true)'/>
                                    <with-param name='avt' value='attr'/>
                                 </call-template>
                                 <copy-of value='outputRef'/>
                              </code:arguments>
                           </code:method-call>
                        </when>
                        <otherwise>
                           <code:method-call name='WriteAttributeString'>
                              <copy-of value='outputRef'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <invoke-delegate delegate='src_expand_attribute' with-params='new { attr }'/>
                              </code:arguments>
                           </code:method-call>
                        </otherwise>
                     </choose>
                  </for-each>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </invoke-delegate>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='radio'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='radio'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>
      <variable name='forModel' value='forAttr is null &amp;&amp; nameAttr is null'/>

      <code:method-call>
         <attribute name='name'>
            <text>Radio</text>
            <if test='forAttr != null || forModel'>For</if>
            <if test='forModel'>Model</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <when test='nameAttr != null'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
               </when>
            </choose>
            <code:expression value='{xcst_expression(el.Attribute("value")!)}'/>
            <if test='forAttr is null
                  &amp;&amp; el.Attribute("checked") is { } checkedAttr'>
               <code:argument name='isChecked'>
                  <call-template name='src:boolean'>
                     <with-param name='val' value='xcst_boolean(checkedAttr, true)'/>
                     <with-param name='avt' value='checkedAttr'/>
                  </call-template>
               </code:argument>
            </if>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "radio"' mode='xcst:extension-instruction'>
      <call-template name='element-instruction'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "antiforgery"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <choose>
         <when test='!element_is_empty(el)'>
            <code:using>
               <call-template name='antiforgery'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:block>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </invoke-delegate>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='antiforgery'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='antiforgery'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <code:method-call name='Antiforgery'>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "antiforgery"' mode='xcst:extension-instruction'>
      <call-template name='element-instruction'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "select"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='clientAttributes' value='input_client_attributes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='input_attributes
            .Concat(new[] { "options", "multiple" })
            .ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
         <with-param name='attribs' value='attributes(el)
            .Where(p => p.Name == "name" || p.Name == "value")
            .ToArray()'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>
      <variable name='outputRef' value='select(docOutput, src + "reference", code)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <variable name='clientAttribs' value='attributes(el)
         .Where(p => p.Name.Namespace == XNamespace.None
            &amp;&amp; clientAttributes.Contains(p.Name.LocalName))
         .ToArray()'/>

      <choose>
         <when test='!element_is_empty(el) || !fn_empty(clientAttribs)'>
            <variable name='dispVar' value='aux_variable("select_" + fn_generate_id(el))'/>
            <variable name='dispRef'>
               <code:variable-reference name='{dispVar}'/>
            </variable>
            <code:using>
               <code:variable name='{dispVar}'>
                  <call-template name='select'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </call-template>
               </code:variable>
               <code:block>
                  <for-each name='attr' in='clientAttribs'>
                     <choose>
                        <when test='input_client_bool_attributes.Contains(attr.Name.LocalName)'>
                           <code:method-call name='WriteBoolean'>
                              <call-template name='html-helper-ref'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <call-template name='src:boolean'>
                                    <with-param name='val' value='xcst_boolean(attr, true)'/>
                                    <with-param name='avt' value='attr'/>
                                 </call-template>
                                 <copy-of value='outputRef'/>
                              </code:arguments>
                           </code:method-call>
                        </when>
                        <otherwise>
                           <code:method-call name='WriteAttributeString'>
                              <copy-of value='outputRef'/>
                              <code:arguments>
                                 <code:string literal='true'>
                                    <value-of value='attr.Name.LocalName'/>
                                 </code:string>
                                 <invoke-delegate delegate='src_expand_attribute' with-params='new { attr }'/>
                              </code:arguments>
                           </code:method-call>
                        </otherwise>
                     </choose>
                  </for-each>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                     <with-param name='app_select_disp_ref' value='dispRef' tunnel='yes'/>
                  </invoke-delegate>
                  <code:method-call name='EndOfConstructor'>
                     <copy-of value='dispRef'/>
                  </code:method-call>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='select'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='NoConstructor'>
                  <code:chain-reference/>
               </code:method-call>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='select'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>
      <variable name='forModel' value='forAttr is null &amp;&amp; nameAttr is null'/>

      <code:method-call>
         <attribute name='name'>
            <text>Select</text>
            <if test='forAttr != null || forModel'>For</if>
            <if test='forModel'>Model</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <otherwise>
                  <if test='nameAttr != null'>
                     <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
                  </if>
                  <choose>
                     <when test='el.Attribute("value") is { } valueAttr'>
                        <code:expression value='{xcst_expression(valueAttr)}'/>
                     </when>
                     <otherwise>
                        <code:default>
                           <copy-of value='src_object_type'/>
                        </code:default>
                     </otherwise>
                  </choose>
               </otherwise>
            </choose>
            <variable name='multiple' value='(el.Attribute("multiple") is { } multipleAttr) ?
               xcst_boolean(multipleAttr)!.Value : false'/>
            <call-template name='option-list'>
               <with-param name='el' value='el'/>
               <with-param name='multiple' value='multiple'/>
            </call-template>
            <if test='multiple'>
               <code:argument name='multiple'>
                  <code:bool value='{fn_string(multiple)}'/>
               </code:argument>
            </if>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "option"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>
      <param name='app_select_disp_ref' as='XElement?' tunnel='yes'/>

      <call-template name='validate-option'>
         <with-param name='el' value='el'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>
      <variable name='outputRef' value='select(docOutput, src + "reference", code)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <code:method-call name='SelectOption'>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='outputRef'/>
            <choose>
               <when test='app_select_disp_ref != null'>
                  <copy-of value='app_select_disp_ref'/>
               </when>
               <otherwise>
                  <code:null/>
               </otherwise>
            </choose>
            <if test='el.Attribute("value") is { } valueAttr'>
               <code:argument name='value'>
                  <code:expression value='{xcst_expression(valueAttr)}'/>
               </code:argument>
            </if>
            <if test='el.Attribute("selected") is { } selectedAttr'>
               <code:argument name='selected'>
                  <call-template name='src:boolean'>
                     <with-param name='val' value='xcst_boolean(selectedAttr, true)'/>
                     <with-param name='avt' value='selectedAttr'/>
                  </call-template>
               </code:argument>
            </if>
            <if test='el.Attribute("disabled") is { } disabledAttr'>
               <code:argument name='disabled'>
                  <call-template name='src:boolean'>
                     <with-param name='val' value='xcst_boolean(disabledAttr, true)'/>
                     <with-param name='avt' value='disabledAttr'/>
                  </call-template>
               </code:argument>
            </if>
            <code:argument name='text'>
               <invoke-delegate delegate='src_simple_content' with-params='new { el }'/>
            </code:argument>
         </code:arguments>
      </code:method-call>
   </template>

   <template name='option-list'>
      <param name='el' as='XElement' required='yes'/>
      <param name='multiple' value='false' as='bool'/>

      <variable name='optionsAttr' value='el.Attribute("options")'/>
      <variable name='optionEls' value='(el.Name.LocalName != "select") ?
         select(el, a + "option").ToArray()
         : System.Array.Empty&lt;XElement>()'/>

      <choose>
         <when test='optionsAttr != null
               || optionEls.Length > 0'>
            <!--
               Casting of xcst:expression avoids turning into a dynamic object when one of the arguments is dynamic.
               A long method chain on a dynamic object hurts performance.
            -->
            <code:chain>
               <code:type-reference name='OptionList' namespace='Xcst.Web.Mvc'/>
               <choose>
                  <when test='optionEls.Length > 0'>
                     <code:method-call name='FromStaticList'>
                        <code:chain-reference/>
                        <code:arguments>
                           <code:int value='{optionEls.Length}'/>
                        </code:arguments>
                     </code:method-call>
                  </when>
                  <otherwise>
                     <code:method-call name='Create'>
                        <code:chain-reference/>
                     </code:method-call>
                  </otherwise>
               </choose>
               <for-each name='opt' in='optionEls'>
                  <call-template name='option-item'>
                     <with-param name='el' value='opt'/>
                  </call-template>
               </for-each>
               <if test='optionsAttr != null'>
                  <code:method-call name='ConcatDynamicList'>
                     <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
                     <code:chain-reference/>
                     <code:arguments>
                        <!-- Don't cast expression, behavior depends on overload resolution -->
                        <code:expression value='{xcst_expression(optionsAttr)}'/>
                     </code:arguments>
                  </code:method-call>
               </if>
            </code:chain>
         </when>
         <otherwise>
            <code:default>
               <code:type-reference name='IEnumerable' namespace='System.Collections.Generic'>
                  <code:type-arguments>
                     <code:type-reference name='SelectListItem' namespace='Xcst.Web.Mvc'/>
                  </code:type-arguments>
               </code:type-reference>
            </code:default>
         </otherwise>
      </choose>
   </template>

   <template name='option-item'>
      <param name='el' as='XElement' required='yes'/>

      <call-template name='validate-option'>
         <with-param name='el' value='el'/>
      </call-template>

      <code:method-call name='AddStaticOption'>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <code:chain-reference/>
         <code:arguments>
            <if test='el.Attribute("value") is { } valueAttr'>
               <code:argument name='value'>
                  <code:cast>
                     <copy-of value='src_object_type'/>
                     <code:expression value='{xcst_expression(valueAttr)}'/>
                  </code:cast>
               </code:argument>
            </if>
            <code:argument name='text'>
               <invoke-delegate delegate='src_simple_content' with-params='new { el }'/>
            </code:argument>
            <if test='el.Attribute("selected") is { } selectedAttr'>
               <code:argument name='selected'>
                  <call-template name='src:boolean'>
                     <with-param name='val' value='xcst_boolean(selectedAttr, true)'/>
                     <with-param name='avt' value='selectedAttr'/>
                  </call-template>
               </code:argument>
            </if>
            <if test='el.Attribute("disabled") is { } disabledAttr'>
               <code:argument name='disabled'>
                  <call-template name='src:boolean'>
                     <with-param name='val' value='xcst_boolean(disabledAttr, true)'/>
                     <with-param name='avt' value='disabledAttr'/>
                  </call-template>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template name='validate-option'>
      <param name='el' as='XElement' required='yes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='new[] { "value", "selected", "disabled" }'/>
      </call-template>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "select"' mode='xcst:extension-instruction'>
      <call-template name='element-instruction'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "label"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='html_attributes
            .Concat(new[] { "for", "name" })
            .ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <variable name='isEmpty' value='element_is_empty(el)'/>

      <choose>
         <when test='!isEmpty'>
            <code:using>
               <call-template name='label'>
                  <with-param name='el' value='el'/>
                  <with-param name='isEmpty' value='isEmpty'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:block>
                  <invoke-delegate delegate='src_sequence_constructor'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </invoke-delegate>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='label'>
                  <with-param name='el' value='el'/>
                  <with-param name='isEmpty' value='isEmpty'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='label'>
      <param name='el' as='XElement' required='yes'/>
      <param name='isEmpty' as='bool' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>
      <variable name='forModel' value='forAttr is null &amp;&amp; nameAttr is null'/>

      <code:method-call>
         <attribute name='name'>
            <text>Label</text>
            <if test='forAttr != null || forModel'>For</if>
            <if test='forModel'>Model</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <when test='nameAttr != null'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
               </when>
            </choose>
            <code:argument name='hasDefaultText'>
               <code:bool value='{fn_string(!isEmpty)}'/>
            </code:argument>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "label"' mode='xcst:extension-instruction'>
      <call-template name='element-instruction'/>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "validation-summary"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='html_attributes
            .Append("include-member-errors")
            .ToArray()'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <choose>
         <when test='!element_is_empty(el)'>
            <variable name='dispVar' value='aux_variable("valmsgsum_" + fn_generate_id(el))'/>
            <code:using>
               <code:variable name='{dispVar}'>
                  <call-template name='validation-summary'>
                     <with-param name='el' value='el'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </call-template>
               </code:variable>
               <code:block>
                  <code:if>
                     <code:property-reference name='ElementStarted'>
                        <code:variable-reference name='{dispVar}'/>
                     </code:property-reference>
                     <code:block>
                        <invoke-delegate delegate='src_sequence_constructor'>
                           <with-param name='el' value='el'/>
                           <with-param name='output' value='docOutput' tunnel='yes'/>
                        </invoke-delegate>
                        <code:method-call name='EndOfConstructor'>
                           <code:variable-reference name='{dispVar}'/>
                        </code:method-call>
                     </code:block>
                  </code:if>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='validation-summary'>
                  <with-param name='el' value='el'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='NoConstructor'>
                  <code:chain-reference/>
               </code:method-call>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='validation-summary'>
      <param name='el' as='XElement' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <code:method-call name='ValidationSummary'>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <if test='el.Attribute("include-member-errors") is { } imeAttr'>
               <code:argument name='includePropertyErrors'>
                  <call-template name='src:boolean'>
                     <with-param name='val' value='xcst_boolean(imeAttr, true)'/>
                     <with-param name='avt' value='imeAttr'/>
                  </call-template>
               </code:argument>
            </if>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

   <template match='XElement el &amp;&amp; el.Name == a + "validation-message"' mode='src:statement'>
      <param name='output' as='XElement' tunnel='yes'/>

      <call-template name='validate-attribs'>
         <with-param name='el' value='el'/>
         <with-param name='optional' value='html_attributes
            .Concat(new[] { "for", "name" })
            .ToArray()'/>
      </call-template>

      <call-template name='validate-for'>
         <with-param name='el' value='el'/>
      </call-template>

      <invoke-delegate delegate='xcst_require_output' with-params='new { el }'/>

      <variable name='docOutput' value='src_doc_output(el, output)'/>

      <call-template name='declare-doc-output'>
         <with-param name='el' value='el'/>
         <with-param name='docOutput' value='docOutput'/>
      </call-template>

      <variable name='isEmpty' value='element_is_empty(el)'/>

      <choose>
         <when test='!isEmpty'>
            <variable name='dispVar' value='aux_variable("valmsg_" + fn_generate_id(el))'/>
            <code:using>
               <code:variable name='{dispVar}'>
                  <call-template name='validation-message'>
                     <with-param name='el' value='el'/>
                     <with-param name='isEmpty' value='isEmpty'/>
                     <with-param name='output' value='docOutput' tunnel='yes'/>
                  </call-template>
               </code:variable>
               <code:block>
                  <code:if>
                     <code:property-reference name='ElementStarted'>
                        <code:variable-reference name='{dispVar}'/>
                     </code:property-reference>
                     <code:block>
                        <invoke-delegate delegate='src_sequence_constructor'>
                           <with-param name='el' value='el'/>
                           <with-param name='output' value='docOutput' tunnel='yes'/>
                        </invoke-delegate>
                     </code:block>
                  </code:if>
               </code:block>
            </code:using>
         </when>
         <otherwise>
            <code:chain>
               <call-template name='validation-message'>
                  <with-param name='el' value='el'/>
                  <with-param name='isEmpty' value='isEmpty'/>
                  <with-param name='output' value='docOutput' tunnel='yes'/>
               </call-template>
               <code:method-call name='Dispose'>
                  <code:chain-reference/>
               </code:method-call>
            </code:chain>
         </otherwise>
      </choose>
   </template>

   <template name='validation-message'>
      <param name='el' as='XElement' required='yes'/>
      <param name='isEmpty' as='bool' required='yes'/>
      <param name='output' as='XElement' tunnel='yes'/>

      <variable name='forAttr' value='el.Attribute("for")'/>
      <variable name='nameAttr' value='el.Attribute("name")'/>

      <code:method-call>
         <attribute name='name'>
            <text>ValidationMessage</text>
            <if test='forAttr != null'>For</if>
         </attribute>
         <invoke-delegate delegate='src_line_number' with-params='new { el }'/>
         <call-template name='html-helper-ref'/>
         <code:arguments>
            <copy-of value='select(output, src + "reference", code)'/>
            <choose>
               <when test='forAttr != null'>
                  <variable name='param' value='aux_variable(fn_generate_id(el))'/>
                  <code:lambda>
                     <code:parameters>
                        <code:parameter name='{param}'/>
                     </code:parameters>
                     <code:property-reference name='{xcst_expression(forAttr)}'>
                        <code:variable-reference name='{param}'/>
                     </code:property-reference>
                  </code:lambda>
               </when>
               <when test='nameAttr != null'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = nameAttr }'/>
               </when>
               <otherwise>
                  <code:string/>
               </otherwise>
            </choose>
            <code:argument name='hasDefaultText'>
               <code:bool value='{fn_string(!isEmpty)}'/>
            </code:argument>
            <if test='el.Attribute("class") is { } classAttr'>
               <code:argument name='class' verbatim='true'>
                  <invoke-delegate delegate='src_expand_attribute' with-params='new { attr = classAttr }'/>
               </code:argument>
            </if>
         </code:arguments>
      </code:method-call>
   </template>

</module>
