// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Web.Routing;
using System.Web.WebPages;
using System.Web.WebPages.Resources;

namespace System.Web.Mvc {

   public class HtmlHelper {

      public static readonly string ValidationInputCssClassName = "input-validation-error";
      public static readonly string ValidationInputValidCssClassName = "input-validation-valid";
      public static readonly string ValidationMessageCssClassName = "field-validation-error";
      public static readonly string ValidationMessageValidCssClassName = "field-validation-valid";
      public static readonly string ValidationSummaryCssClassName = "validation-summary-errors";
      public static readonly string ValidationSummaryValidCssClassName = "validation-summary-valid";

      static readonly object _html5InputsModeKey = new object();
      static string _idAttributeDotReplacement;

      DynamicViewDataDictionary _dynamicViewDataDictionary;

      public static bool ClientValidationEnabled { get; set; } = true;

      public static bool UnobtrusiveJavaScriptEnabled { get; set; } = true;

      /// <summary>
      /// Element name used to wrap a top-level message in
      /// <code>ValidationExtensions.ValidationSummary(HtmlHelper)</code> and other overloads.
      /// </summary>

      public static string ValidationSummaryMessageElement { get; set; } = "span";

      /// <summary>
      /// Element name used to wrap the validation message generated by
      /// <code>ValidationExtensions.ValidationMessage(HtmlHelper, String)</code> and other overloads.
      /// </summary>

      public static string ValidationMessageElement { get; set; } = "span";

      public static string IdAttributeDotReplacement {
         get {
            if (String.IsNullOrEmpty(_idAttributeDotReplacement)) {
               _idAttributeDotReplacement = "_";
            }
            return _idAttributeDotReplacement;
         }
         set { _idAttributeDotReplacement = value; }
      }

      public dynamic ViewBag {
         get {
            if (_dynamicViewDataDictionary == null) {
               _dynamicViewDataDictionary = new DynamicViewDataDictionary(() => ViewData);
            }
            return _dynamicViewDataDictionary;
         }
      }

      public ViewContext ViewContext { get; private set; }

      public ViewDataDictionary ViewData => ViewDataContainer.ViewData;

      public IViewDataContainer ViewDataContainer { get; internal set; }

      public RouteCollection RouteCollection { get; private set; }

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "The usage of the property is as an instance property of the helper.")]
      public Html5DateRenderingMode Html5DateRenderingMode { get; set; }

      internal Func<string, ModelMetadata, IEnumerable<ModelClientValidationRule>> ClientValidationRuleFactory { get; set; }

      public HtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer)
         : this(viewContext, viewDataContainer, RouteTable.Routes) { }

      public HtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection) {

         if (viewContext == null) throw new ArgumentNullException(nameof(viewContext));
         if (viewDataContainer == null) throw new ArgumentNullException(nameof(viewDataContainer));
         if (routeCollection == null) throw new ArgumentNullException(nameof(routeCollection));

         this.ViewContext = viewContext;
         this.ViewDataContainer = viewDataContainer;
         this.RouteCollection = routeCollection;
         this.ClientValidationRuleFactory = (name, metadata) =>
            ModelValidatorProviders.Providers
               .GetValidators(metadata ?? ModelMetadata.FromStringExpression(name, this.ViewData), this.ViewContext)
               .SelectMany(v => v.GetClientValidationRules());
      }

      /// <summary>
      /// Creates a dictionary of HTML attributes from the input object, 
      /// translating underscores to dashes.
      /// </summary>
      /// <example>
      /// <c>new { data_name="value" }</c> will translate to the entry <c>{ "data-name" , "value" }</c>
      /// in the resulting dictionary.
      /// </example>
      /// <param name="htmlAttributes">Anonymous object describing HTML attributes.</param>
      /// <returns>A dictionary that represents HTML attributes.</returns>

      public static RouteValueDictionary AnonymousObjectToHtmlAttributes(object htmlAttributes) {

         var result = new RouteValueDictionary();

         if (htmlAttributes != null) {
            foreach (PropertyHelper property in HtmlAttributePropertyHelper.GetProperties(htmlAttributes)) {
               result.Add(property.Name, property.GetValue(htmlAttributes));
            }
         }

         return result;
      }

      /// <summary>
      /// Set this property to <see cref="Mvc.Html5DateRenderingMode.Rfc3339"/> to have templated helpers such as Html.EditorFor render date and time
      /// values as Rfc3339 compliant strings.
      /// </summary>
      /// <remarks>
      /// The scope of this setting is for the current view alone. Sub views and parent views
      /// will default to <see cref="Mvc.Html5DateRenderingMode.CurrentCulture"/> unless explicitly set otherwise.
      /// </remarks>

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "For consistency, all helpers are instance methods.")]
      public string AttributeEncode(string value) {
         return (!String.IsNullOrEmpty(value)) ? HttpUtility.HtmlAttributeEncode(value) : String.Empty;
      }

      public string AttributeEncode(object value) {
         return AttributeEncode(Convert.ToString(value, CultureInfo.InvariantCulture));
      }

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "For consistency, all helpers are instance methods.")]
      public string Encode(string value) {
         return (!String.IsNullOrEmpty(value)) ? HttpUtility.HtmlEncode(value) : String.Empty;
      }

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "For consistency, all helpers are instance methods.")]
      public string Encode(object value) {
         return value != null ? HttpUtility.HtmlEncode(value) : String.Empty;
      }

      internal string EvalString(string key) {
         return Convert.ToString(this.ViewData.Eval(key), CultureInfo.CurrentCulture);
      }

      internal string EvalString(string key, string format) {
         return Convert.ToString(this.ViewData.Eval(key, format), CultureInfo.CurrentCulture);
      }

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "For consistency, all helpers are instance methods.")]
      public string FormatValue(object value, string format) {
         return ViewDataDictionary.FormatValueInternal(value, format);
      }

      internal bool EvalBoolean(string key) {
         return Convert.ToBoolean(this.ViewData.Eval(key), CultureInfo.InvariantCulture);
      }

      public static string GenerateIdFromName(string name) {
         return GenerateIdFromName(name, IdAttributeDotReplacement);
      }

      public static string GenerateIdFromName(string name, string idAttributeDotReplacement) {

         if (name == null) throw new ArgumentNullException(nameof(name));
         if (idAttributeDotReplacement == null) throw new ArgumentNullException(nameof(idAttributeDotReplacement));

         // TagBuilder.CreateSanitizedId returns null for empty strings, return String.Empty instead to avoid breaking change

         if (name.Length == 0) {
            return String.Empty;
         }

         return TagBuilder.CreateSanitizedId(name, idAttributeDotReplacement);
      }

      public static string GetInputTypeString(InputType inputType) {

         switch (inputType) {
            case InputType.CheckBox:
               return "checkbox";
            case InputType.Hidden:
               return "hidden";
            case InputType.Password:
               return "password";
            case InputType.Radio:
               return "radio";
            case InputType.Text:
               return "text";
            default:
               return "text";
         }
      }

      internal object GetModelStateValue(string key, Type destinationType) {

         ModelState modelState;

         if (this.ViewData.ModelState.TryGetValue(key, out modelState)) {
            if (modelState.Value != null) {
               return modelState.Value.ConvertTo(destinationType, null /* culture */);
            }
         }

         return null;
      }

      public IDictionary<string, object> GetUnobtrusiveValidationAttributes(string name) {
         return GetUnobtrusiveValidationAttributes(name, metadata: null);
      }

      // Only render attributes if unobtrusive client-side validation is enabled, and then only if we've
      // never rendered validation for a field with this name in this form. Also, if there's no form context,
      // then we can't render the attributes (we'd have no <form> to attach them to).

      public IDictionary<string, object> GetUnobtrusiveValidationAttributes(string name, ModelMetadata metadata) {

         var results = new Dictionary<string, object>();

         // The ordering of these 3 checks (and the early exits) is for performance reasons.

         if (!this.ViewContext.UnobtrusiveJavaScriptEnabled) {
            return results;
         }

         FormContext formContext = this.ViewContext.GetFormContextForClientValidation();

         if (formContext == null) {
            return results;
         }

         string fullName = this.ViewData.TemplateInfo.GetFullHtmlFieldName(name);

         if (formContext.RenderedField(fullName)) {
            return results;
         }

         formContext.RenderedField(fullName, true);

         IEnumerable<ModelClientValidationRule> clientRules = ClientValidationRuleFactory(name, metadata);

         UnobtrusiveValidationAttributesGenerator.GetValidationAttributes(clientRules, results);

         return results;
      }

      /// <summary>
      /// Wraps HTML markup in an IHtmlString, which will enable HTML markup to be
      /// rendered to the output without getting HTML encoded.
      /// </summary>
      /// <param name="value">HTML markup string.</param>
      /// <returns>An IHtmlString that represents HTML markup.</returns>

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "For consistency, all helpers are instance methods.")]
      public IHtmlString Raw(string value) {
         return new HtmlString(value);
      }

      /// <summary>
      /// Wraps HTML markup from the string representation of an object in an IHtmlString,
      /// which will enable HTML markup to be rendered to the output without getting HTML encoded.
      /// </summary>
      /// <param name="value">object with string representation as HTML markup</param>
      /// <returns>An IHtmlString that represents HTML markup.</returns>

      [SuppressMessage("Microsoft.Performance", "CA1822:MarkMembersAsStatic", Justification = "For consistency, all helpers are instance methods.")]
      public IHtmlString Raw(object value) {
         return new HtmlString(value?.ToString());
      }

      /// <summary>
      /// Creates a dictionary from an object, by adding each public instance property as a key with its associated 
      /// value to the dictionary. It will expose public properties from derived types as well. This is typically used
      /// with objects of an anonymous type.
      /// </summary>
      /// <example>
      /// <c>new { property_name = "value" }</c> will translate to the entry <c>{ "property_name" , "value" }</c>
      /// in the resulting dictionary.
      /// </example>
      /// <param name="value">The object to be converted.</param>
      /// <returns>The created dictionary of property names and property values.</returns>

      public static IDictionary<string, object> ObjectToDictionary(object value) {
         return TypeHelpers.ObjectToDictionary(value);
      }
   }

   public class HtmlHelper<TModel> : HtmlHelper {

      ViewDataDictionary<TModel> _viewData;
      DynamicViewDataDictionary _dynamicViewDataDictionary;

      public new ViewDataDictionary<TModel> ViewData => _viewData;

      public new dynamic ViewBag {
         get {
            if (_dynamicViewDataDictionary == null) {
               _dynamicViewDataDictionary = new DynamicViewDataDictionary(() => ViewData);
            }

            return _dynamicViewDataDictionary;
         }
      }

      public HtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer)
         : this(viewContext, viewDataContainer, RouteTable.Routes) { }

      public HtmlHelper(ViewContext viewContext, IViewDataContainer viewDataContainer, RouteCollection routeCollection)
         : base(viewContext, viewDataContainer, routeCollection) {

         _viewData = new ViewDataDictionary<TModel>(viewDataContainer.ViewData);
      }
   }

   /// <summary>
   /// Controls the value-rendering method For HTML5 input elements of types such as date, time, datetime and datetime-local.
   /// </summary>

   public enum Html5DateRenderingMode {

      /// <summary>
      /// Render date and time values according to the current culture's ToString behavior.
      /// </summary>

      CurrentCulture = 0,

      /// <summary>
      /// Render date and time values as Rfc3339 compliant strings to support HTML5 date and time types of input elements.
      /// </summary>

      Rfc3339,
   }

   public enum InputType {
      CheckBox,
      Hidden,
      Password,
      Radio,
      Text
   }

   static class UnobtrusiveValidationAttributesGenerator {

      public static void GetValidationAttributes(IEnumerable<ModelClientValidationRule> clientRules, IDictionary<string, object> results) {

         if (clientRules == null) throw new ArgumentNullException(nameof(clientRules));
         if (results == null) throw new ArgumentNullException(nameof(results));

         bool renderedRules = false;

         foreach (ModelClientValidationRule rule in clientRules) {

            renderedRules = true;
            string ruleName = "data-val-" + rule.ValidationType;

            ValidateUnobtrusiveValidationRule(rule, results, ruleName);

            results.Add(ruleName, rule.ErrorMessage ?? String.Empty);
            ruleName += "-";

            foreach (var kvp in rule.ValidationParameters) {
               results.Add(ruleName + kvp.Key, kvp.Value ?? String.Empty);
            }
         }

         if (renderedRules) {
            results.Add("data-val", "true");
         }
      }

      static void ValidateUnobtrusiveValidationRule(ModelClientValidationRule rule, IDictionary<string, object> resultsDictionary, string dictionaryKey) {

         if (String.IsNullOrWhiteSpace(rule.ValidationType)) {
            throw new InvalidOperationException(
               String.Format(
                  CultureInfo.CurrentCulture,
                  WebPageResources.UnobtrusiveJavascript_ValidationTypeCannotBeEmpty,
                  rule.GetType().FullName));
         }

         if (resultsDictionary.ContainsKey(dictionaryKey)) {
            throw new InvalidOperationException(
               String.Format(
                  CultureInfo.CurrentCulture,
                  WebPageResources.UnobtrusiveJavascript_ValidationTypeMustBeUnique,
                  rule.ValidationType));
         }

         if (rule.ValidationType.Any(c => !Char.IsLower(c))) {
            throw new InvalidOperationException(
               String.Format(CultureInfo.CurrentCulture, WebPageResources.UnobtrusiveJavascript_ValidationTypeMustBeLegal,
                  rule.ValidationType,
                  rule.GetType().FullName));
         }

         foreach (var key in rule.ValidationParameters.Keys) {

            if (String.IsNullOrWhiteSpace(key)) {
               throw new InvalidOperationException(
                  String.Format(
                     CultureInfo.CurrentCulture,
                     WebPageResources.UnobtrusiveJavascript_ValidationParameterCannotBeEmpty,
                     rule.GetType().FullName));
            }

            if (!Char.IsLower(key.First()) || key.Any(c => !Char.IsLower(c) && !Char.IsDigit(c))) {
               throw new InvalidOperationException(
                  String.Format(
                     CultureInfo.CurrentCulture,
                     WebPageResources.UnobtrusiveJavascript_ValidationParameterMustBeLegal,
                     key,
                     rule.GetType().FullName));
            }
         }
      }
   }

   static class TagBuilder {

      public static string CreateSanitizedId(string originalId) {
         return CreateSanitizedId(originalId, HtmlHelper.IdAttributeDotReplacement);
      }

      public static string CreateSanitizedId(string originalId, string invalidCharReplacement) {

         if (String.IsNullOrEmpty(originalId)) {
            return null;
         }

         if (invalidCharReplacement == null) {
            throw new ArgumentNullException(nameof(invalidCharReplacement));
         }

         char firstChar = originalId[0];

         if (!Html401IdUtil.IsLetter(firstChar)) {
            // the first character must be a letter
            return null;
         }

         var sb = new StringBuilder(originalId.Length);
         sb.Append(firstChar);

         for (int i = 1; i < originalId.Length; i++) {
            char thisChar = originalId[i];
            if (Html401IdUtil.IsValidIdCharacter(thisChar)) {
               sb.Append(thisChar);
            } else {
               sb.Append(invalidCharReplacement);
            }
         }

         return sb.ToString();
      }

      // Valid IDs are defined in http://www.w3.org/TR/html401/types.html#type-id

      static class Html401IdUtil {

         public static bool IsValidIdCharacter(char c) {
            return (IsLetter(c) || IsDigit(c) || IsAllowableSpecialCharacter(c));
         }

         static bool IsAllowableSpecialCharacter(char c) {
            switch (c) {
               case '-':
               case '_':
               case ':':
                  // note that we're specifically excluding the '.' character
                  return true;

               default:
                  return false;
            }
         }

         static bool IsDigit(char c) {
            return ('0' <= c && c <= '9');
         }

         public static bool IsLetter(char c) {
            return (('A' <= c && c <= 'Z') || ('a' <= c && c <= 'z'));
         }
      }
   }
}

namespace System.Web.WebPages {

   class HtmlAttributePropertyHelper : PropertyHelper {

      static ConcurrentDictionary<Type, PropertyHelper[]> _reflectionCache = new ConcurrentDictionary<Type, PropertyHelper[]>();

      public override string Name {
         get {
            return base.Name;
         }
         protected set {
            base.Name = (value == null) ? null : value.Replace('_', '-');
         }
      }

      public static new PropertyHelper[] GetProperties(object instance) {
         return GetProperties(instance, CreateInstance, _reflectionCache);
      }

      static PropertyHelper CreateInstance(PropertyInfo property) {
         return new HtmlAttributePropertyHelper(property);
      }

      public HtmlAttributePropertyHelper(PropertyInfo property)
         : base(property) { }
   }
}