// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;
using System.Web.Helpers.AntiXsrf;
using System.Web.Helpers.Claims;
using System.Web.WebPages.Resources;
using Xcst;

namespace System.Web.Helpers {

   /// <summary>
   /// Provides access to the anti-forgery system, which provides protection against
   /// Cross-site Request Forgery (XSRF, also called CSRF) attacks.
   /// </summary>

   public static class AntiForgery {

      static readonly AntiForgeryWorker _worker = CreateSingletonAntiForgeryWorker();

      static AntiForgeryWorker CreateSingletonAntiForgeryWorker() {

         // initialize the dependency chain

         IAntiForgeryConfig config = new AntiForgeryConfigWrapper();
         IAntiForgeryTokenSerializer serializer = new AntiForgeryTokenSerializer(MachineKey45CryptoSystem.Instance);
         ITokenStore tokenStore = new AntiForgeryTokenStore(config, serializer);
         IClaimUidExtractor claimUidExtractor = new ClaimUidExtractor(config, ClaimsIdentityConverter.Default);
         ITokenValidator tokenValidator = new TokenValidator(config, claimUidExtractor);

         return new AntiForgeryWorker(serializer, config, tokenStore, tokenValidator);
      }

      /// <summary>
      /// Generates an anti-forgery token for this request. This token can
      /// be validated by calling the Validate() method.
      /// </summary>
      /// <returns>An HTML string corresponding to an &lt;input type="hidden"&gt;
      /// element. This element should be put inside a &lt;form&gt;.</returns>
      /// <remarks>
      /// This method has a side effect: it may set a response cookie.
      /// </remarks>

      public static void GetHtml(HttpContextBase httpContext, XcstWriter output) {

         HttpContext context = HttpContext.Current;

         if (context == null) throw new ArgumentException(WebPageResources.HttpContextUnavailable);

         _worker.GetFormInputElement(httpContext, output);
      }

      /// <summary>
      /// Generates an anti-forgery token pair (cookie and form token) for this request.
      /// This method is similar to GetHtml(), but this method gives the caller control
      /// over how to persist the returned values. To validate these tokens, call the
      /// appropriate overload of Validate.
      /// </summary>
      /// <param name="oldCookieToken">The anti-forgery token - if any - that already existed
      /// for this request. May be null. The anti-forgery system will try to reuse this cookie
      /// value when generating a matching form token.</param>
      /// <param name="newCookieToken">Will contain a new cookie value if the old cookie token
      /// was null or invalid. If this value is non-null when the method completes, the caller
      /// must persist this value in the form of a response cookie, and the existing cookie value
      /// should be discarded. If this value is null when the method completes, the existing
      /// cookie value was valid and needn't be modified.</param>
      /// <param name="formToken">The value that should be stored in the &lt;form&gt;. The caller
      /// should take care not to accidentally swap the cookie and form tokens.</param>
      /// <remarks>
      /// Unlike the GetHtml() method, this method has no side effect. The caller
      /// is responsible for setting the response cookie and injecting the returned
      /// form token as appropriate.
      /// </remarks>

      [SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "1#", Justification = "Method is intended for advanced audiences.")]
      [SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "2#", Justification = "Method is intended for advanced audiences.")]
      [EditorBrowsable(EditorBrowsableState.Advanced)]
      public static void GetTokens(string oldCookieToken, out string newCookieToken, out string formToken) {

         HttpContext context = HttpContext.Current;

         if (context == null) throw new ArgumentException(WebPageResources.HttpContextUnavailable);

         _worker.GetTokens(new HttpContextWrapper(context), oldCookieToken, out newCookieToken, out formToken);
      }

      /// <summary>
      /// Validates an anti-forgery token that was supplied for this request.
      /// The anti-forgery token may be generated by calling GetHtml().
      /// </summary>
      /// <remarks>
      /// Throws an HttpAntiForgeryException if validation fails.
      /// </remarks>

      public static void Validate() {

         HttpContext context = HttpContext.Current;

         if (context == null) throw new ArgumentException(WebPageResources.HttpContextUnavailable);

         _worker.Validate(new HttpContextWrapper(context));
      }

      /// <summary>
      /// Validates an anti-forgery token pair that was generated by the GetTokens method.
      /// </summary>
      /// <param name="cookieToken">The token that was supplied in the request cookie.</param>
      /// <param name="formToken">The token that was supplied in the request form body.</param>
      /// <remarks>
      /// Throws an HttpAntiForgeryException if validation fails.
      /// </remarks>

      [EditorBrowsable(EditorBrowsableState.Advanced)]
      public static void Validate(string cookieToken, string formToken) {

         HttpContext context = HttpContext.Current;

         if (context == null) throw new ArgumentException(WebPageResources.HttpContextUnavailable);

         _worker.Validate(new HttpContextWrapper(context), cookieToken, formToken);
      }

      public static bool TryValidate() {

         HttpContext context = HttpContext.Current;

         if (context == null) throw new ArgumentException(WebPageResources.HttpContextUnavailable);

         return TryValidate(new HttpContextWrapper(context));
      }

      public static bool TryValidate(HttpContextBase context) {

         if (context == null) throw new ArgumentNullException(nameof(context));

         return _worker.TryValidate(context);
      }

      [EditorBrowsable(EditorBrowsableState.Advanced)]
      public static bool TryValidate(string cookieToken, string formToken) {

         HttpContext context = HttpContext.Current;

         if (context == null) throw new ArgumentException(WebPageResources.HttpContextUnavailable);

         return TryValidate(new HttpContextWrapper(context), cookieToken, formToken);
      }

      [EditorBrowsable(EditorBrowsableState.Advanced)]
      public static bool TryValidate(HttpContextBase context, string cookieToken, string formToken) {

         if (context == null) throw new ArgumentNullException(nameof(context));

         return _worker.TryValidate(context, cookieToken, formToken);
      }
   }
}
