// Copyright (c) Microsoft Open Technologies, Inc. All rights reserved. See License.txt in the project root for license information.

using System.Collections.Generic;
using HttpContext = Microsoft.AspNetCore.Http.HttpContext;

namespace System.Web.Mvc {

   public class ViewContext : ControllerContext {

      // Some values have to be stored in HttpContext.Items in order to be propagated between calls
      // to RenderPartial(), RenderAction(), etc.

      static readonly object
      _formContextKey = new();

      // We need a default FormContext if the user uses html <form> instead of an MvcForm

      FormContext
      _defaultFormContext = new();

      public virtual bool
      ClientValidationEnabled { get; set; } = true;

      public virtual bool
      UnobtrusiveJavaScriptEnabled { get; set; } = true;

      /// <summary>
      /// Element name used to wrap a top-level message generated by
      /// <code>a:validation-summary</code>.
      /// </summary>
      public virtual string
      ValidationSummaryMessageElement { get; set; } = "span";

      /// <summary>
      /// Element name used to wrap a top-level message generated by
      /// <code>a:validation-message</code>.
      /// </summary>
      public virtual string
      ValidationMessageElement { get; set; } = "span";

      public virtual FormContext
      FormContext {
         get {
            if (HttpContext.Items.TryGetValue(_formContextKey, out var formCtxObj)
               && formCtxObj is FormContext formCtx) {
               return formCtx;
            }
            return _defaultFormContext;
         }
         set => HttpContext.Items[_formContextKey] = value;
      }

      // parameterless constructor used for mocking
      public
      ViewContext() { }

      public
      ViewContext(HttpContext httpContext)
         : base(httpContext) { }

      public
      ViewContext(ControllerContext controllerContext)
         : base(controllerContext) { }

      internal FormContext?
      GetFormContextForClientValidation() =>
         (this.ClientValidationEnabled) ? this.FormContext : null;
   }

   public class FormContext {

      readonly Dictionary<string, bool>
      _renderedFields = new();

      public bool
      RenderedField(string fieldName) {

         _renderedFields.TryGetValue(fieldName, out var result);
         return result;
      }

      public void
      RenderedField(string fieldName, bool value) =>
         _renderedFields[fieldName] = value;
   }
}
